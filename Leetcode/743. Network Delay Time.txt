class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        List<List<int[]>> graph = new ArrayList<>(N + 1);
        for(int i = 0; i <= N; i++)
            graph.add(new ArrayList<>());
        for(int[] time : times)
            graph.get(time[0]).add(new int[]{time[1], time[2]});
        
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                return a[1] - b[1];
            }
        });
        
        pq.offer(new int[]{K, 0});
        Set<Integer> visited = new HashSet<>();
        int dist = 0;
        while(!pq.isEmpty()) {
            int[] curr = pq.poll();
            if(!visited.add(curr[0])) continue;
            dist = curr[1];
            for(int[] neighbor : graph.get(curr[0])) {
                if(!visited.contains(neighbor[0]))
                    pq.offer(new int[]{neighbor[0], neighbor[1] + curr[1]});
            }
        }
        return visited.size() == N ? dist : -1;
    }
}

class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        int max = 100 * 6000;
        int[] cost = new int[N+1];
        int[][] path = new int[N+1][N+1];
        for (int i = 0; i <= N; i++){
            Arrays.fill(path[i], max);
        }
        for (int[] t : times){
            path[t[0]][t[1]] = t[2];
        }
        for (int i = 0; i <= N; i++){
            cost[i] = path[K][i];
        }
    
        boolean[] visited = new boolean[N+1];
        
        cost[K] = 0;
        visited[K] = true;
        for (int i = 1; i < N; i++){
            int min = max;
            int node = -1;
            for(int j = 1; j <= N; j++){
                if (!visited[j] && cost[j] < min){
                    min = cost[j];
                    node = j;
                }
            }
            if (node == -1) return -1;
            visited[node] = true; 
            for (int j = 1; j <= N; j++){
                int c = path[node][j] + min;
                if (cost[j] > c){
                    cost[j] = c;
                }
            }
        }
        
        int res = 0;
        for(int i = 1; i <= N; i++){
            res = Math.max(res, cost[i]);
        }
        return res;
    }
}
