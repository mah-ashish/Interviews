/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;

    public Node() {}

    public Node(int _val,List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
public class Solution {
    
    public Node cloneGraph(Node node) {
        HashMap<Integer, Node> map = new HashMap<>();
        return dfs(node, map);
    }

    private Node dfs(Node node, HashMap<Integer, Node> map) {
        if (node == null) return null;
        
        if (map.containsKey(node.val)) {
            return map.get(node.val);
        }
        Node clone = new Node(node.val, new LinkedList<Node>());
        map.put(clone.val, clone);
        for (Node neighbor : node.neighbors) {
            clone.neighbors.add(dfs(neighbor, map));
        }
        return clone;
    }
}

class Solution {
    private Map<Node, Node> map = new HashMap<>();
    
    
    public Node cloneGraph(Node node) {
        if(!map.containsKey(node)) {
            Node n = new Node();
            map.put(node, n);
            n.val = node.val;
            n.neighbors = new ArrayList<Node>();
            for(Node nb:node.neighbors){
                n.neighbors.add(cloneGraph(nb));
            }
            return n;
            
        } else {
            return map.get(node);
        }
        
    }
}
