/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root==null) return res;
        
        Deque<Node> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            ArrayList<Integer> levelNodes = new ArrayList<>();
            int n = queue.size();
            while(n>0){
                Node node = queue.poll();
                levelNodes.add(node.val);
                while(node.children!=null && !node.children.isEmpty()){
                    queue.offer(node.children.remove(0));
                }
                n--;
            }
            res.add(levelNodes);
        }
        return res;
    }
}

class Solution {
    /*Recursion*/
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null) return result;
        
        helper(root, result, 0);
        return result;
    }
    
    void helper(Node root, List<List<Integer>> result, int level) {
        if(root == null)
            return;
        
        List<Integer> lst;
        if(result.size() == level) {
            lst = new ArrayList<Integer>();
            result.add(lst);
        } else {
            lst = result.get(level);
        }
        
        lst.add(root.val);
        for(Node child : root.children) {
            helper(child, result, level+1);
        }
    }
}
