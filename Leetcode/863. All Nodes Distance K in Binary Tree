/*
https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/
*/

class Solution {
    List<Integer> res;
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        res = new ArrayList<>();
        addDistancesKNodes(root, target, K);
        return res;
    }
    
    private int addDistancesKNodes(TreeNode root, TreeNode target, int K) {
        if(root==null){
            return -1;
        }
        
        if(root == target){
            addDistancesKNodes(root, K);
            return 1;
        }
        
        int left = addDistancesKNodes(root.left, target, K);
        
        if(left!=-1){
            if(K - left == 0){
                res.add(root.val);
            } else {
                addDistancesKNodes(root.right, K - left - 1);
            }
            return left + 1;
        }
        
        int right = addDistancesKNodes(root.right, target, K);
        
        if(right!=-1){
            if(K - right == 0){
                res.add(root.val);
            } else {
                addDistancesKNodes(root.left, K - right - 1);
            }
            return right + 1;
        }
        
        return -1;
    }
    
    private void addDistancesKNodes(TreeNode root, int K) {
        if(root==null){
            return;
        }
        if(K<0){
            return;
        }
        if(K==0){
            res.add(root.val);
            return;
        }
        addDistancesKNodes(root.left, K-1);
        addDistancesKNodes(root.right, K-1);
    }
}
