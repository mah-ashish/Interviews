class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        HashSet<List<Integer>> set = new HashSet<>();
        int n = nums.length;
        if(n==0)
            return res;
        
        Arrays.sort(nums);
        
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int k=j+1;
                int l=n-1;
                
                while(k<l){
                    int sum = nums[i]+nums[j]+nums[k]+nums[l];
                    if(sum==target){
                        ArrayList<Integer> arr = new ArrayList<>();
                        arr.add(nums[i]);
                        arr.add(nums[j]);
                        arr.add(nums[k]);
                        arr.add(nums[l]);
                        if(!set.contains(arr)){
                            set.add(arr);
                        }
                        l--;
                    }
                    else if(sum<target)
                        k++;
                    else
                        l--;
                }
            }
        }
        
        res.addAll(set);
        
        return res;
        
    }
}


class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        for(int i = 0; i < nums.length - 3; i++){
            if(i > 0 && nums[i] == nums[i-1]) continue;
            if((nums[i] + nums[nums.length - 1] * 3) < target) continue;
            if((nums[i] * 4) > target) break;
            for(int j = i + 1; j < nums.length - 2; j++){
                if(j > i+1 && nums[j] == nums[j-1]) continue;
                if((nums[i] + nums[j] + nums[nums.length-1]*2) < target) continue;
                if((nums[i] + nums[j] * 3) > target) break;
                
                int begin = j+1, end = nums.length - 1;
                while(begin < end){
                    int sum = nums[i] + nums[j] + nums[begin] + nums[end];
                    if(sum < target) begin++;
                    else if(sum > target) end--;
                    else if(sum == target){
                        if(begin == j+1 || nums[begin] != nums[begin-1]){
                            List<Integer> temp = new ArrayList<Integer>();
                            temp.add(nums[i]);
                            temp.add(nums[j]);
                            temp.add(nums[begin]);
                            temp.add(nums[end]);
                            res.add(temp);
                        }
                        begin++;
                        end--;
                    }

                }
            }
        }
        return res;
        
    }
}
